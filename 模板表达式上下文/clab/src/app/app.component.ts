import {Component} from '@angular/core';

/**
 * 模板语法
 * Angular 应用管理着用户之所见和所为，并通过 Component 类的实例（组件）和面向用户的模板来与用户交互。
 * 从使用模型-视图-控制器 (MVC) 或模型-视图-视图模型 (MVVM) 的经验中，很多开发人员都熟悉了组件和模板这两个概念。
 * 在 Angular 中，组件扮演着控制器或视图模型的角色，模板则扮演视图的角色。
 * 这是一篇关于 Angular 模板语言的技术大全。
 * 它解释了模板语言的基本原理，并描述了你将在文档中其它地方遇到的大部分语法。
 *
 * 模板中的 HTML
 * HTML 是 Angular 模板的语言。几乎所有的 HTML 语法都是有效的模板语法。
 * 但值得注意的例外是 <script> 元素，它被禁用了，以阻止脚本注入攻击的风险。
 * （实际上，<script> 只是被忽略了。） 参见安全页了解详情。
 * 有些合法的 HTML 被用在模板中是没有意义的。
 * <html>、<body> 和 <base> 元素这个舞台上中并没有扮演有用的角色。剩下的所有元素基本上就都一样用了。
 * 可以通过组件和指令来扩展模板中的 HTML 词汇。
 * 它们看上去就是新元素和属性。
 * 接下来将学习如何通过数据绑定来动态获取/设置 DOM（文档对象模型）的值。
 * 首先看看数据绑定的第一种形式 —— 插值表达式，它展示了模板的 HTML 可以有多丰富。
 *
 * 模板表达式
 *
 * 模板表达式产生一个值。 Angular 执行这个表达式，并把它赋值给绑定目标的属性，这个绑定目标可能是 HTML 元素、组件或指令。
 * {{1 + 1}} 中所包含的模板表达式是 1 + 1。
 * 在属性绑定中会再次看到模板表达式，它出现在 = 右侧的引号中，就像这样：[property]="expression"。
 *
 * 编写模板表达式所用的语言看起来很像 JavaScript。 很多 JavaScript 表达式也是合法的模板表达式，但不是全部。
 * JavaScript 中那些具有或可能引发副作用的表达式是被禁止的，包括：
 * - 赋值 (=, +=, -=, ...)
 * - new 运算符
 * - 使用 ; 或 , 的链式表达式
 * - 自增和自减运算符：++ 和 --
 * 和 JavaScript 语 法的其它显著不同包括：
 * - 不支持位运算 | 和 &
 * - 具有新的模板表达式运算符，比如 |、?. 和 !。
 *
 * 表达式上下文
 * 典型的表达式上下文就是这个组件实例，它是各种绑定值的来源。
 * 在下面的代码片段中，双花括号中的 title 和引号中的 isUnchanged 所引用的都是 AppComponent 中的属性。
 *
 * 表达式的上下文可以包括组件之外的对象。
 * 比如模板输入变量 (let hero)和模板引用变量(#heroInput)就是备选的上下文对象之一。
 * <div *ngFor="let hero of heroes">{{hero.name}}</div>
 * <input #heroInput> {{heroInput.value}}
 *
 * 表达式中的上下文变量是由模板变量、指令的上下文变量（如果有）和组件的成员叠加而成的。
 * 如果你要引用的变量名存在于一个以上的命名空间中，那么，模板变量是最优先的，其次是指令的上下文变量，最后是组件的成员。
 * 上一个例子中就体现了这种命名冲突。
 * 组件具有一个名叫 hero 的属性，而 *ngFor 声明了一个也叫 hero 的模板变量。
 * 在 {{hero.name}} 表达式中的 hero 实际引用的是模板变量，而不是组件的属性。
 * 模板表达式不能引用全局命名空间中的任何东西，比如 window 或 document。
 * 它们也不能调用 console.log 或 Math.max。 它们只能引用表达式上下文中的成员。
 *
 * 表达式指南
 * 模板表达式能成就或毁掉一个应用。请遵循下列指南：
 * - 没有可见的副作用
 * - 执行迅速
 * - 非常简单
 * - 幂等性
 *
 * 超出上面指南外的情况应该只出现在那些你确信自己已经彻底理解的特定场景中。
 *
 * 没有可见的副作用
 * 模板表达式除了目标属性的值以外，不应该改变应用的任何状态。
 * 这条规则是 Angular “单向数据流”策略的基础。
 * 永远不用担心读取组件值可能改变另外的显示值。
 * 在一次单独的渲染过程中，视图应该总是稳定的。
 *
 * 执行迅速
 * Angular 会在每个变更检测周期后执行模板表达式。
 * 它们可能在每一次按键或鼠标移动后被调用。
 * 表达式应该快速结束，否则用户就会感到拖沓，特别是在较慢的设备上。
 * 当计算代价较高时，应该考虑缓存那些从其它值计算得出的值。
 *
 * 非常简单
 * 虽然也可以写出相当复杂的模板表达式，但不要那么写。
 * 常规是属性名或方法调用。
 * 偶尔的逻辑取反 (!) 也还凑合。
 * 其它情况下，应在组件中实现应用和业务逻辑，使开发和测试变得更容易。
 *
 * 幂等性
 * 最好使用幂等的表达式，因为它没有副作用，并且能提升 Angular 变更检测的性能。
 * 在 Angular 的术语中，幂等的表达式应该总是返回完全相同的东西，直到某个依赖值发生改变。
 * 在单独的一次事件循环中，被依赖的值不应该改变。
 * 如果幂等的表达式返回一个字符串或数字，连续调用它两次，也应该返回相同的字符串或数字。
 * 如果幂等的表达式返回一个对象（包括 Date 或 Array），连续调用它两次，也应该返回同一个对象的引用。
 */
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  title = 'Lab';

  isUnchanged = true;

}
