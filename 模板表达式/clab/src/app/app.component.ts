import {Component} from '@angular/core';

/**
 * 模板语法
 * Angular 应用管理着用户之所见和所为，并通过 Component 类的实例（组件）和面向用户的模板来与用户交互。
 * 从使用模型-视图-控制器 (MVC) 或模型-视图-视图模型 (MVVM) 的经验中，很多开发人员都熟悉了组件和模板这两个概念。
 * 在 Angular 中，组件扮演着控制器或视图模型的角色，模板则扮演视图的角色。
 * 这是一篇关于 Angular 模板语言的技术大全。
 * 它解释了模板语言的基本原理，并描述了你将在文档中其它地方遇到的大部分语法。
 *
 * 模板中的 HTML
 * HTML 是 Angular 模板的语言。几乎所有的 HTML 语法都是有效的模板语法。
 * 但值得注意的例外是 <script> 元素，它被禁用了，以阻止脚本注入攻击的风险。
 * （实际上，<script> 只是被忽略了。） 参见安全页了解详情。
 * 有些合法的 HTML 被用在模板中是没有意义的。
 * <html>、<body> 和 <base> 元素这个舞台上中并没有扮演有用的角色。剩下的所有元素基本上就都一样用了。
 * 可以通过组件和指令来扩展模板中的 HTML 词汇。
 * 它们看上去就是新元素和属性。
 * 接下来将学习如何通过数据绑定来动态获取/设置 DOM（文档对象模型）的值。
 * 首先看看数据绑定的第一种形式 —— 插值表达式，它展示了模板的 HTML 可以有多丰富。
 *
 * 模板表达式
 *
 * 模板表达式产生一个值。 Angular 执行这个表达式，并把它赋值给绑定目标的属性，这个绑定目标可能是 HTML 元素、组件或指令。
 * {{1 + 1}} 中所包含的模板表达式是 1 + 1。
 * 在属性绑定中会再次看到模板表达式，它出现在 = 右侧的引号中，就像这样：[property]="expression"。
 *
 * 编写模板表达式所用的语言看起来很像 JavaScript。 很多 JavaScript 表达式也是合法的模板表达式，但不是全部。
 * JavaScript 中那些具有或可能引发副作用的表达式是被禁止的，包括：
 * - 赋值 (=, +=, -=, ...)
 * - new 运算符
 * - 使用 ; 或 , 的链式表达式
 * - 自增和自减运算符：++ 和 --
 * 和 JavaScript 语 法的其它显著不同包括：
 * - 不支持位运算 | 和 &
 * - 具有新的模板表达式运算符，比如 |、?. 和 !。
 */
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
}
